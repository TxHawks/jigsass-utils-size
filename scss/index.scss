// *************************************
//
// # jigsass-utils-size
// -> Dynamically generated size-related utility classes
//
// Author: TxHawks (tofu.hawks@gmail.com)
// https://txhawks.github.io/jigsass-utils-size/
//
// *************************************

@charset 'UTF-8';

// -------------------------------------
// Dependencies
// -------------------------------------

@if (not mixin-exists(jigsass-define-util)) {
  @error '`jigsass-utils-ssize` has a dependency on `jigsass-tools-selectors`. ' +
    'Please import it before this file.';
}





// -------------------------------------
// Intorduction
// -------------------------------------

// stylelint-disable
/* ---
section: Size Utils
title: Introduction
order: -10
---

[![NPM version][npm-image]][npm-url]
[![Dependency Status][daviddm-image]][daviddm-url]

A collection of dynamically generated size-related utility classes.

Class names follow the [Emmet](http://docs.emmet.io/cheat-sheet/) abbreviation
syntax, with colons (':') replaced by two dashes (`--`) to follow BEM naming
conventions.

#### Available classes

  - `.u-w--<amount>`: width
  - `.u-miw--<amount>`: min-width
  - `.u-maw--<amount>`: max-width

  - `.u-h--<amount>`: height
  - `.u-mih--<amount>`: min-height
  - `.u-mah--<amount>`: max-height


Where `<amount>` can be either a unitless number representing a number of
typographic rhythm units as defined in
[$jigsass-sizes](https://txhawks.github.io/jigsass-tools-typography/#variable-jigsass-sizes),
a percentage, or a length specified in pixels or rems.


#### Installation

Using npm:

```sh
npm i -S jigsass-utils-size
```

#### Usage
Import JigSass Utils Size into your main scss file near its very end, together with all
other utilities (utilities should always be the last to be imported).

```scss
@import 'path/to/jigsass-utils-size/scss/index';
```

Like all other JigSass Utils, JigSass Size does not automatically generate any CSS
when imported. You would need to explicitly indicate that each individual size
class should actually be generated in each component or object it is used in
(clarification: This will include style declarations inside `.foo` and .`bar`):

```scss
// _c.foo.scss
.foo {
  @include jigsass-util(u-w, $modifier: 360px); // <-- width: 360px

  ...
}
```

```scss
// _c.bar.scss
.bar {
  @include jigsass-util(u-miw, $modifier: 600px);  // <-- min-width: 600px
  @include jigsass-util(
    u-miw, $modifier: 1200px,
    $from: large
  ); // <-- max-width: 1200px from large bp and on.

  ...
}
```

Doing so helps us a great deal with portability, as no matter where we import component or object
partials, the correct utility classes will be generated. Think of it as a poor man's dependency
management.

Developer communication is also assisted by including "dependencies" wherever they are required,
as anyone going through a partial, can easily understand how it should be marked up with just a
glance.

As far as bloat goes, just don't worry about it - the actual styles will only be generated once,
at the location in the cascade where the Jigsass Size partial was imported into the main file.


JigSass Size classes are responsive-enabled, using [JigSass MQ](https://txhawks.github.io/jigsass-tools-mq/)
and the breakpoints defined in the [$jigsass-breakpoints](https://txhawks.github.io/jigsass-tools-mq/#variable-jigsass-breakpoints) variable.

Based on the breakpoint arguments passed to `jigsass-util` when including a Size class,
responsive modifiers are generated according to the following logic:

```scss
.u-w--<modifier>[-[-from-<breakpoint-name>][-until-<breakpoint-name>][-misc-<breakpoint-name>]]
```

So, assuming the `medium`, `large` and `landscape` breakpoints are defined in `$jigsass-breakpoints`
as `600px`, `1024px` and `(orientation: landscape)` respectively,

```scss
@include jigsass-util(u-h, $modifier: 50);
```
will generate the `.u-h--50` class, which is not limited to any media-query.

```scss
@include jigsass-util(u-h, $modifier: 10, $until: medium);
```

will generate the `.u-h--10--until-medium` class, which will be in effect at
`(max-width: 37.49em)` and will override styles in the default class until that point.

```scss
@include jigsass-util(u-mih, $modifier: 300px, $from: large, $misc: landscape);
```

will generate the `.u-mih--200px--from-large-when-landscape` class, which will go into
effect at `(min-width: 64em) and (orientation: landscape)` and will override styles in the default
class under these  conditions.


**License:** MIT



[npm-image]: https://badge.fury.io/js/jigsass-utils-size.svg
[npm-url]: https://npmjs.org/package/jigsass-utils-size

[daviddm-image]: https://david-dm.org/TxHawks/jigsass-utils-size.svg?theme=shields.io
[daviddm-url]: https://david-dm.org/TxHawks/jigsass-utils-size
*/
// stylelint-enable





// -------------------------------------
// Variables
// -------------------------------------

/// A constant used for generating size utility classes.
/// ---
/// @type Map
/// ---
$_jigsass-size-sizers: (
  u-w: width,
  u-miw: min-width,
  u-maw: max-width,

  u-h: height,
  u-mih: min-height,
  u-mah: max-height,
);

/// A constant used for generating size doclets.
/// ---
/// @type Map
/// ---
$_jigsass-size-translation: (
  u-w: width,
  u-miw: min-width,
  u-maw: max-width,

  u-h: height,
  u-mih: min-height,
  u-mah: max-height,
);


// Used internally to store doclets
$_doclet-store: () !default;

// Used internally to ordering doclets
$_jigsass-util-size-i: 1;





// -------------------------------------
// Definitions
// -------------------------------------

@each $sizer, $property in $_jigsass-size-sizers {
  @include jigsass-define-util($sizer) {
    @if(not $jigsass-util-modifier) {
      @error 'jigsass-utils-size: #{$jigsass-util-name} must be passed A ' +
        'length for sizeing as a modifier.';
    }

    $_type: map-get($_jigsass-size-sizers, $jigsass-util-name);
    $_modifier: $jigsass-util-modifier;
    $_prop: map-get($_jigsass-size-sizers, $jigsass-util-name);

    @if(
      type-of($_modifier) != number or
      not index(px '' '%' rem, unit($_modifier))
    ) {
      @error 'jigsass-utils-size: A length modifier must be a unitless number, ' +
        ', a percentage, or a length in pixels or rems. \a' +
        'You are trying to pass the #{type-of($_modifier)} `#{$_modifier}`.';
    }


    // When length is in rhythm units
    @if (unitless($_modifier)) {
      @include jigsass-rem($_prop, jigsass-rhythm($_modifier, $unit: rem));
    }

    // When length is percentage or a number in pixels
    @else {
      #{$_prop}: $_modifier;
    }

    $_doclet: $jigsass-util-name + ($jigsass-util-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      $_doclet-store: append($_doclet-store, $_doclet) !global;
      // stylelint-disable
/* ---
section: Size Utils
title: #{$jigsass-util-name}--#{$jigsass-util-modifier}
order: #{$_jigsass-util-size-i}
---
A utility class to set the #{map-get($_jigsass-size-sizers, $jigsass-util-name)} of
an element.

#### Include with:

```scss
@include jigsass-util(#{$jigsass-util-name}, $modifier: #{$jigsass-util-modifier} [, $from, $until, $misc]);
```

#### Example

```example:html
  <div class='fpo  #{$jigsass-util-name}--#{$jigsass-util-modifier}'>
    This element has a #{map-get($_jigsass-size-sizers, $jigsass-util-name)} of
    #{ if(
      unitless($jigsass-util-modifier),
      $jigsass-util-modifier rhythm units,
      $jigsass-util-modifier
    )}.
  </div>
```
*/
      // stylelint-enable
      $_jigsass-util-size-i: $_jigsass-util-size-i + 1 !global;
    }
  }
}
